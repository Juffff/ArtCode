/*try {
                Node<E> node = (Node<E>) thirdArrayList.get(i);

                if (i == 0) System.out.print(x(stages) + node.element + x(stages));

            }catch (ClassCastException e){}
*/
          /*  if (i==0) System.out.print("\t\t");
            if (thirdArrayList.get(i)==null){ System.out.print(tabs.substring(0,stages)+tabs.substring(0,stages));}
            else if (!thirdArrayList.get(i).equals("Splitter")){
                Node<E> node = (Node<E>)thirdArrayList.get(i);
                System.out.print(tabs.substring(0,stages)+node.element+tabs.substring(0,stages));}
            else {System.out.println();
                stages--;*/


                 /*System.out.println("STAGES = " +stages);*/




                       /* ArrayDeque<Node<E>> tempArrayDeque = new ArrayDeque<>();
                        ArrayDeque<Node<E>> finalArrayDeque = new ArrayDeque<>();
                        tempArrayDeque.add(currentNode);
                        finalArrayDeque.add(currentNode);
                        while (true){
                            finalArrayDeque.peek();

                        }
                        while (!tempArrayDeque.isEmpty()) {
                            currentNode = tempArrayDeque.poll();
                            System.out.println("\t" + currentNode.element);
                            for (int i = 0; i < tempArrayDeque.size() ; i++) {

                                if (currentNode.leftChild != null) {
                                    tempArrayDeque.add(currentNode.leftChild);
                                }
                                if (currentNode.rightChild != null) {
                                    tempArrayDeque.add(currentNode.rightChild);
                                }
                            }

                        }*/


                /*
                    @Override
                    public Iterator<E> iterator() {
                        return new Itr<>();
                    }


                    private class Itr<E> implements Iterator<E>{
                        ArrayDeque<Node<E>> iteratorDeque = getIneratorDeque();

                        @Override
                        public boolean hasNext() {
                            return !iteratorDeque.isEmpty();
                        }

                       @Override
                       public E next() {
                           return (E)(iteratorDeque.poll().element);
                       }

                       private ArrayDeque<Node<E>> getIneratorDeque(){
                           Node<E> currentNode = (Node<E>) root;
                            ArrayDeque<Node<E>> tempArrayDeque = new ArrayDeque<>();
                            ArrayDeque<Node<E>> finalArrayDeque = new ArrayDeque<>();
                            tempArrayDeque.add(currentNode);

                            while (!tempArrayDeque.isEmpty()) {
                                currentNode = tempArrayDeque.poll();
                                finalArrayDeque.add(currentNode);
                                for (int i = 0; i < tempArrayDeque.size() ; i++) {
                                    if (currentNode.leftChild != null) {
                                        tempArrayDeque.add(currentNode.leftChild);
                                    }
                                    if (currentNode.rightChild != null) {
                                        tempArrayDeque.add(currentNode.rightChild);
                                    }
                                }
                            }
                            return finalArrayDeque;
                        }


                    }
                    */




                     private String x(int stage) {
                            String x = "";
                            int lim = (int) Math.pow(2, stage - 1);
                            for (int i = 0; i < lim; i++) {
                                x = x + " ";
                            }
                            return x;
                        }

                        public void print() {

                            Node<E> currentNode = root;
                            int treeSize = size();
                            ArrayList<Node<E>> firstArrayList = new ArrayList<>();
                            ArrayList<Node<E>> secondArrayList = new ArrayList<>();
                            ArrayList<Object> thirdArrayList = new ArrayList<>();

                            firstArrayList.add(currentNode);
                            treeSize--;
                            thirdArrayList.addAll(firstArrayList);
                            int stages = 1;
                            thirdArrayList.add("Splitter");

                            try {
                                while (treeSize != 0) {
                                    for (int i = 0; i < firstArrayList.size(); i++) {
                                        if (firstArrayList.get(i).leftChild != null) {
                                            secondArrayList.add(firstArrayList.get(i).leftChild);
                                            treeSize--;
                                        } else secondArrayList.add(null);
                                        if (firstArrayList.get(i).rightChild != null) {
                                            secondArrayList.add(firstArrayList.get(i).rightChild);
                                            treeSize--;
                                        } else secondArrayList.add(null);
                                    }
                                    thirdArrayList.addAll(secondArrayList);
                                    stages++;
                                    thirdArrayList.add("Splitter");
                                    firstArrayList.clear();
                                    firstArrayList.addAll(secondArrayList);
                                    secondArrayList.clear();
                                }
                            } catch (NullPointerException e) {
                            }


                            String tabs = "";
                            for (int i = 0; i <= stages; i++) {
                                tabs = tabs + "\t";
                            }


                            for (int i = 0; i < thirdArrayList.size(); i++) {
                                try {
                                    if (thirdArrayList.get(i)==null) {System.out.print(x(stages)+" ");}
                                    else  if(thirdArrayList.get(i).equals("Splitter")) {System.out.print("\n"); stages--;}
                                    else {
                                        Node<E> node = ((Node<E>) thirdArrayList.get(i));
                                        System.out.print(x(stages) + node.element);
                                    }
                                }catch (ClassCastException e){}


                            }

                        }







                        //////////////////STG ARRAY TO OUTPUT

                                /*int weight = getStages();
                                int height = (int)Math.pow(2,weight)+1;
                                System.out.println(weight);
                                System.out.println(height);
                                Node<E>[][] nodeArray = new Node[weight][height];

                                for (int i = 0; i <weight ; i++) {
                                    for (int j = 0; j < height; j++) {

                                        System.out.print(nodeArray[i][j]+" ");
                                    }
                                    System.out.println();
                                }*/